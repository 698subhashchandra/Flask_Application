pipeline {
    agent any
    environment {
        SONAR_HOME = tool "Sonar"
    }
    stages {
        stage("Clone Code") {
            steps {
                echo "Cloning the Code"
                git url: "https://github.com/698subhashchandra/Flask_Application.git", branch: "main"
            }
        }
        stage("SonarQube Quality Analysis") {
            steps {
                withSonarQubeEnv("Sonar") {
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=Flask_Application -Dsonar.projectKey=Flask_Application"
                }
            }
        }
        stage("Sonar Quality Gate Scan") {
            steps {
                timeout(time: 3, unit: "MINUTES") {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage("Trivy File System Scan") {
            steps {
                echo "Scan file system"
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        stage("Build and Test") {
            steps {
                echo "Building the Image and Test It"
                withDockerRegistry([credentialsId: "dockerHub", url: ""]) {
                    script {
                        app = docker.build("asg")
                    }
                }
            }
        }
        stage("Push The Image on AWS ECR") {
            steps {
                script {
                    docker.withRegistry('https://129390742221.dkr.ecr.eu-north-1.amazonaws.com/', 'ecr:eu-north-1:aws-credentials') {
                        app.push("latest")
                    }
                }
            }
        }
        stage("Deploy") {
            steps {
                echo "Deploying the Application"
                withKubeConfig([credentialsId: 'kubelogin']) {
                    sh('kubectl delete all --all -n devsecops')
                    sh('kubectl apply -f deployment.yaml --namespace=devsecops')
                }
            }
        }
    }
}

